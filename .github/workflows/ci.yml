name: Build argparse

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              name: "Windows latest - MSVC",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
            }
          - {
              name: "Ubuntu latest - GCC",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
            }
          - {
              name: "Ubuntu latest - Clang",
              os: ubuntu-latest,
              cc: "clang",
              cxx: "clang++",
            }
          - {
              name: "macOS 13",
              os: macos-13,
              cc: "clang",
              cxx: "clang++",
            }
    steps:
      - uses: actions/checkout@v4

      - name: Use xcode
        if: runner.os == 'macOS'
        run: sudo xcode-select -switch /Applications/Xcode_15.0.app

      - name: CMake configure
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

      - name: CMake build
        run: cmake --build build --parallel

  clangtidy:
    name: "clang-tidy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-tidy
        run: |
          sudo apt-get update
          sudo apt install -y clang-tidy

      - name: CMake configure
        run: cmake -Bbuild -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_CLANG_TIDY="clang-tidy;-checks=-*,clang-analyzer-*,modernize-*;-warnings-as-errors=*"

      - name: CMake build
        run: cmake --build build --parallel

  sanitisers:
    name: "sanitisers"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: CMake configure
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS=-fsanitize=address,undefined,alignment,array-bounds -DCMAKE_EXE_LINKER_FLAGS=-fsanitize=address,undefined,alignment,array-bounds

      - name: CMake build
        run: cmake --build build --parallel --target run_unit_test

  valgrind:
    name: "Valgrind"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Valgrind
        run: |
          sudo apt-get update
          sudo apt install -y valgrind

      - name: CMake configure
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

      - name: CMake build
        run: cmake --build build --parallel --target unittest

      - name: Run Valgrind
        run: valgrind ./build/test/unittest/unittest

  coverage:
    name: "Coverage"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install lcov
        run: |
          sudo apt-get update
          sudo apt install -y lcov

      - name: CMake configure
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS=--coverage -DCMAKE_EXE_LINKER_FLAGS=--coverage

      - name: CMake build
        run: cmake --build build --parallel --target run_unit_test

      - name: Generate coverage
        run: |
          lcov --directory build --capture --output-file coverage.info
          lcov --list coverage.info
          lcov --extract coverage.info --output-file argparse.info *argparse.h
          lcov --list argparse.info
          bash <(curl -s https://codecov.io/bash) -f argparse.info
